set -e

REMOTE=upstream
NEXUS=http://localhost:8081/nexus
BROWSER=firefox

if [ ! -z "$DH_DEBUG" ]
then
    echo -e "DEBUG MODE! Turn off with\n unset DH_DEBUG"
    set -x
fi

test -r $HOME/.devhelper && . $HOME/.devhelper

cleanup() {
    if ! [ -z "$tmpdir" ]
    then
	rm -rf "$tmpdir"
    fi
}

remote() {
    repos=`git remote 2>/dev/null|| echo skip ` # if git remote fails, this is not a git repo
    if [ "$repos" = skip ] 
    then
	echo >&2 "This is not a git repo, 'git remote' failed"
	return 1
    fi

    if echo "$repos" | grep "$REMOTE" -q
    then
	repo="$REMOTE"
    elif echo "$repos" | grep "origin" -q
    then
	repo="origin"
    else
	echo >&2 "unknown or empty remotes: '$repos'"
	return 1
    fi

    echo "$repo"
}

current_branch() {
    git name-rev --name-only HEAD
}

local_repo() {
    if [[ $1 = +* ]]
    then
    	if [ "$1" == "+" ]
	then
	    echo "/tmp/mvnrepo/`current_branch`"
	elif [[ $1 = +/* ]]
	then
	    echo "${1:1}"
	else
	    echo "/tmp/mvnrepo/${1:1}"
	fi
    else
	grep localRepository $HOME/.m2/settings.xml | sed -e "s@^.*<localRepository>\([^<]*\)</localRepository>.*@\1@" | head -n 1
    fi
}

tmpfile() {
    if [ -z "$tmpdir" ]
    then
	tmpdir="`mktemp -d -t devhelper.XXXXXXXXXX`"
    fi
    mktemp -p "$tmpdir" -t devhelper.XXXXXXXXXX
}

pushUrl() {
    remoteName="$1"
    if [ -z "$remoteName" ]
    then
	remoteName=`remote`
	if [ $? -ne 0 ]
	then
	    echo >&2 "No git remote found"
	    return 1
	fi
    fi

    gitUrl=$(git remote show -n $remoteName | grep "Push  URL:" | cut -d ":" -f 2- | tr -d '[[:space:]]' )

    echo $gitUrl
}

function ghRepoUrl {
    if ! (echo "$gitUrl" | grep -q 'git@github.com')
    then
	echo >&2 "URL does not point to github: '$gitUrl'"
	exit 1
    fi
    echo "$1" | sed -e "s#git@github.com:\(.*\)\?#https://github.com/\1#" -e "s/\.git$//"
}

trap cleanup EXIT INT
